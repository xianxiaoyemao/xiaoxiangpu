<?php
namespace app\api\controller;
use app\admin\model\Category;
use app\BaseController;
use app\common\SearchBuilders\ProductSearchBuilder;
//use app\Exceptions\InvalidRequestException;
//use Illuminate\Http\Request;
//use Illuminate\Pagination\LengthAwarePaginator;
use think\facade\Db;
use app\Request;
class Product extends BaseController
{
    protected $model = null;
    public function initialize()
    {
        $this -> model = new \app\common\model\Product();
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function index(Request $request){
        $page = 1;
        $perPage = 16;
        //构建查询
        $builder = (new ProductSearchBuilder)->onSale()->paginate($perPage,$page);
//        dump($builder);die;
//        if ($request->input('category_id') && $category = Category::find($request->input('category_id'))) {
//            $builder->category($category);
//        }
//        $request->input('search', '')
        if ($search ='水杯 牛逼') {
            $keywords = array_filter(explode(' ',$search));
            $builder->keywords($search);
        }
        // 是否有提交 order 参数，如果有就赋值给 $order 变量
        // order 参数用来控制商品的排序规则
//        if ($order = $request->input('order', '')) {
//            // 是否是以 _asc 或者 _desc 结尾
//            if (preg_match('/^(.+)_(asc|desc)$/', $order, $m)) {
//                // 如果字符串的开头是这 3 个字符串之一，说明是一个合法的排序值
//                if (in_array($m[1], ['price', 'sold_count', 'rating'])) {
//                    // 根据传入的排序值来构造排序参数
//                    $builder->orderBy($search);
//                }
//            }
//        }
        $result = app('es')->search($builder->getParams());
        dump($result);die;
        // 通过 collect 函数将返回结果转为集合，并通过集合的 pluck 方法取到返回的商品 ID 数组
        $productIds = collect($result['hits']['hits'])->pluck('_id')->all();
        // 通过 whereIn 方法从数据库中读取商品数据
        $products = $this -> model
            ->whereIn('id', $productIds)
            // orderByRaw 可以让我们用原生的 SQL 来给查询结果排序
            ->orderRaw(sprintf("FIND_IN_SET(id, '%s')", join(',', $productIds)))
            ->get();
        // 返回一个 LengthAwarePaginator 对象
//        $pager = new LengthAwarePaginator($products, $result['hits']['total']['value'], $perPage, $page, [
//            'path' => route('products.index', false), // 手动构建分页的 url
//        ]);

        if ($request->input('category_id') && $category = Category::find($request->input('category_id'))) {
            if ($category->is_directory) {
                // 如果是一个父类目，则使用 category_path 来筛选
                $params['body']['query']['bool']['filter'][] = [
                    'prefix' => ['category_path' => $category->path.$category->id.'-'],
                ];
            } else {
                // 否则直接通过 category_id 筛选
                $params['body']['query']['bool']['filter'][] = ['term' => ['category_id' => $category->id]];
            }
        }
        return view('products.index', [
            'products' => $pager,
            'filters'  => [
                'search' => $search,
                'order'  => $order,
            ],
            'category' => $category ?? null,
        ]);
    }

//    public function show(Product $product,Request $request)
//    {
//        if (!$product->status) {
//            throw new InvalidRequestException("商品未上架");
//        }
//
//        if (!$product->audit_status) {
//            throw new InvalidRequestException("请等待商品审核");
//        }
//
//        $product = $product->where('id',$product->id)->with([
//            'skus',
//            'properties',
//            'images',
//            'productdescriptions'
//        ])->first();
//        $images = [];
//        foreach ($product->images as $key) {
//            foreach ($key->image_url as $value) {
//                $images[] = $value;
//            }
//        }
//
//        $address = $request->user()->addresses()->orderBy('last_used_at','desc')->get();
//
//        return view('products.productdetail',[
//            'product' => $product, //商品
//            'skus' => $product->skus, //商品sku
//            'properties' => $product->properties,//商品属性
//            'images' => $images,//商品详情页图片
//            'productdescriptions' => $product->productdescriptions,//商品详情
//            'addresses' => $address,
//        ]);
//    }
//
//    public function indexss(Request $request)
//    {
//        if ($request->isMethod('post')) {
//            $db = Product::where('id',$request->input('id'))->first()->toArray();
//            return json_encode($db);
//        }else{
//            return view('products.indexss');
//        }
//    }
}
